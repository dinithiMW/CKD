from math import sqrt
import numpy
import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, mean_absolute_error
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error
from sklearn import metrics
from sklearn.preprocessing import MinMaxScaler

np.random.seed(200)
# read CSV file
dataset = pd.read_csv("ckd.csv")

print(dataset.shape)
z = dataset['CKD'].value_counts()
print(z)

x = dataset.iloc[:, 5:12]
y = dataset.iloc[:, 2]

# histogram of X values
x.hist()
plt.show()
# replace missing values
imp = SimpleImputer(missing_values=np.nan, strategy='mean')
imp = imp.fit(x)

x_imp = imp.transform(x)

# scale the features
#scaler = MinMaxScaler()
#scaler.fit(x_imp)

#x_scaled = scaler.transform(x_imp)
#x_scaled = scaler.transform(x_test_imp)

#print(x_scaled)

x_train, x_test, y_train, y_test = train_test_split(x_imp, y, test_size=0.2)

print(x_train.shape, x_test.shape)

le = LabelEncoder()
le = le.fit(y_train)

le_y_train = pd.Series(le.transform(y_train))
print(le_y_train)
print(y_train)

le_y_test = le.transform(y_test)
print(le_y_test)

model_ANN = MLPClassifier(hidden_layer_sizes=(4, 4, 4), activation='relu', solver='adam', batch_size=64,  max_iter=250, random_state=0,alpha=1e-4)
model_ANN.fit(x_train, le_y_train)

y_predict = model_ANN.predict(x_test)
print(y_predict)

# performance of the model on the test
corr_matrix = numpy.corrcoef(le_y_test, y_predict)
corr = corr_matrix[0, 1]
R_sq = corr ** 2
print("R_squared is", R_sq)
recall = metrics.recall_score(le_y_test, y_predict)
precision = metrics.precision_score(le_y_test, y_predict)
print("Recall (all 1s predicted right):", round(recall, 2))
print("Precision (confidence when predicting a 1):", round(precision, 2))
print("Detail:")
print("Accuracy is", accuracy_score(le_y_test, y_predict))

# taking root of mean squared error
root_mean_squared_error = sqrt(mean_squared_error(le_y_test, y_predict))
print("RMSE is", root_mean_squared_error)

MAE = mean_absolute_error(le_y_test, y_predict)
print("MAPE is", MAE)

print("Mean squared error", mean_squared_error(le_y_test, y_predict))
print(confusion_matrix(le_y_test, y_predict))
print(classification_report(le_y_test, y_predict))

plt.scatter(le_y_test,y_predict)
plt.xlabel('True values')
plt.ylabel('Predictions')
plt.show()

classes = np.unique(y_test)
fig, ax = plt.subplots()
cm = metrics.confusion_matrix(y_test, y_predict, labels=classes)
sns.heatmap(cm, annot=True, fmt='d', cmap=plt.cm.Reds, cbar=False)
ax.set(xlabel="Predict", ylabel="True", title="Confusion matrix")
ax.set_yticklabels(labels=classes, rotation=0)
plt.show()


